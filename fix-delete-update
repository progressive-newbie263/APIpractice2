// Add/Edit product functionality
productForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const productData = {
    name: document.getElementById("productName").value,
    image: document.getElementById("productImage").value,
    ratingstars: parseFloat(document.getElementById("productRating").value),
    ratingcount: parseInt(document.getElementById("productRatingCount").value),
    pricecents: parseInt(document.getElementById("productPrice").value),
    type: document.getElementById("productType").value,
    keywords: document.getElementById("productKeywords").value,
    sizechartlink: document.getElementById("sizeChartLink").value,
    instructionslink: document.getElementById("instructionsLink").value,
    warrantylink: document.getElementById("warrantyLink").value,
  };

  try {
    if (editingProduct) {
      // Update product
      await fetch(`http://localhost:8082/products/${editingProduct.id}`, {
        method: "PUT",
        
        headers: { 
          "Content-Type": "application/json" 
        },
        
        body: JSON.stringify(productData),
      });
      editingProduct = null;
    } else {
      // Add new product
      await fetch(`http://localhost:8082/products`, {
        method: "POST",
        
        headers: { 
          "Content-Type": "application/json" 
        },
        
        body: JSON.stringify(productData),
      });
    }

    productForm.reset(); // Clear form
    formTitle.textContent = "Add New Product"; // Reset form title
    submitBtn.value = "Add Product"; // Reset button text
    fetchProducts(); // Refresh product list

  } catch (error) {
    console.error("Failed to submit product data:", error);
  }
});


// Edit product
function editProduct(id) {
  const product = products.find((p) => p.id === id);

  document.getElementById("productName").value = product.name;
  document.getElementById("productImage").value = product.image;
  document.getElementById("productRating").value = product.ratingstars;
  document.getElementById("productRatingCount").value = product.ratingcount;
  document.getElementById("productPrice").value = product.pricecents;
  document.getElementById("productType").value = product.type;
  document.getElementById("productKeywords").value = product.keywords;
  document.getElementById("sizeChartLink").value = product.sizechartlink.String ? product.sizechartlink.String : 'No information available';
  document.getElementById("instructionsLink").value = product.instructionslink.String ? product.instructionslink.String : 'No information available';
  document.getElementById("warrantyLink").value = product.warrantylink.String ? product.warrantylink.String : 'No information available';

  editingProduct = product;
  formTitle.textContent = `Edit Product (ID: ${product.id})`;
  submitBtn.value = "Update Product";
}

// Delete product
async function deleteProduct(id) {
  if (confirm("Are you sure you want to delete this product?")) {
    try {
      await fetch(`http://localhost:8082/products/${id}`, {
        method: "DELETE",
      });
      fetchProducts(); // Refresh product list after deletion
    } catch (error) {
      console.error("Failed to delete product:", error);
    }
  }
}

// Initialize by fetching products when the page loads